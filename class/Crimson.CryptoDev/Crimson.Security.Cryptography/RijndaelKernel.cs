//
// Author: Sebastien Pouliot  <sebastien@gmail.com>
// See LICENSE for copyrights and restrictions
//

// note: this file is not autogenerated since it's a special case where only
// one (128 bits) block size will be handled by the kernel (if possible).
// Everything else is is routed back to the managed fallback implementation.

using System;
using System.Security.Cryptography;
using System.Runtime.InteropServices;

using Mono.Security.Cryptography;
using Crimson.CryptoDev;

namespace Crimson.Security.Cryptography {

	// since a lot of (older) code uses Rijndael for AES (as the default block
	// size match the AES standard) we provide a RijndaelKernel implementation
	// that will use the managed implementation for unsupported block size or
	// cipher modes

	public class RijndaelKernel : Rijndael {

		//const int BufferBlockSize = Int32.MaxValue;
		const int BufferBlockSize = 1936; // mv_cesa limit
		
		public RijndaelKernel ()
		{
		}
		
		public override void GenerateIV ()
		{
			IVValue = KeyBuilder.IV (BlockSizeValue >> 3);
		}
		
		public override void GenerateKey ()
		{
			KeyValue = KeyBuilder.Key (KeySizeValue >> 3);
		}

		Rijndael Fallback ()
		{
			Rijndael r = new RijndaelManaged ();
			r.Mode = Mode;
			r.Padding = Padding;
			r.BlockSize = BlockSize;
			return r;
		}
		
		public override ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV) 
		{
			try {
				if (BlockSize == 128) {
					switch (Mode) {
					case CipherMode.CBC:
						return new CryptoDevTransform (this, Cipher.AES_CBC, false, rgbKey, rgbIV, BufferBlockSize);
					case CipherMode.ECB:
						return new CryptoDevTransform (this, Cipher.AES_ECB, false, rgbKey, rgbIV, BufferBlockSize);
					}
				}
			}
			catch (CryptographicException) {
				// the kernel might not have the required mode (even for 'generic') available
			}
			// fallback to default implementation for other, non-AES, block sizes
			// cipher modes (effectivelty CFB) 
			return Fallback ().CreateDecryptor (rgbKey, rgbIV);
		}
		
		public override ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV) 
		{
			try {
				if (BlockSize == 128) {
					switch (Mode) {
					case CipherMode.CBC:
						return new CryptoDevTransform (this, Cipher.AES_CBC, true, rgbKey, rgbIV, BufferBlockSize);
					case CipherMode.ECB:
						return new CryptoDevTransform (this, Cipher.AES_ECB, true, rgbKey, rgbIV, BufferBlockSize);
					}
				}
			}
			catch (CryptographicException) {
				// the kernel might not have the required mode (even for 'generic') available
			}
			// fallback to default implementation for other, non-AES, block sizes
			// cipher modes (effectivelty CFB) 
			return Fallback ().CreateEncryptor (rgbKey, rgbIV);
		}
	}
}
